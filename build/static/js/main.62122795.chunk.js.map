{"version":3,"sources":["firebase.js","Post.js","NewPost.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","auth","storage","Post","user","postId","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","console","log","preventDefault","add","NewPost","setNewPostModal","setCaption","image","setImage","progress","setProgress","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","alert","message","child","getDownloadURL","then","url","timestamp","FieldValue","serverTimestamp","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","openSignUpModal","setOpenSignUpModal","openSignInModal","setOpenSignInModal","openNewPostModal","setUsername","email","setEmail","password","setPassword","setUser","onAuthStateChanged","authUser","displayName","updateProfile","orderBy","id","post","Modal","open","onClose","style","Input","createUserWithEmailAndPassword","catch","signInWithEmailAndPassword","signOut","key","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62122795.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyDt7ldXAl48gZLACHE2NRzAYFHRLMq3W9A\",\n  authDomain: \"instagram-clone-9bdb0.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-9bdb0.firebaseio.com\",\n  projectId: \"instagram-clone-9bdb0\",\n  storageBucket: \"instagram-clone-9bdb0.appspot.com\",\n  messagingSenderId: \"737320969529\",\n  appId: \"1:737320969529:web:b6a264c27beb6c464674e8\",\n});\n\nconst db = firebaseApp.firestore();\nconst auth = firebaseApp.auth();\nconst storage = firebaseApp.storage();\n\nexport { db, auth, storage };\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./Post.css\";\n\nimport { Avatar } from \"@material-ui/core\";\nimport { db } from \"./firebase\";\n\nfunction Post({ user, postId, username, caption, imageUrl }) {\n  const [comments, setComments] = useState([]);\n  const [comment, setComment] = useState(\"\");\n  useEffect(() => {\n    let unsubscribe;\n    if (postId) {\n      unsubscribe = db\n        .collection(\"posts\")\n        .doc(postId)\n        .collection(\"comments\")\n        .onSnapshot((snapshot) => {\n          setComments(snapshot.docs.map((doc) => doc.data()));\n        });\n    }\n    return () => {\n      unsubscribe();\n    };\n  }, [postId]);\n  const postComment = (event) => {\n    console.log(\"Just posted a comment\");\n    event.preventDefault();\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: username,\n    });\n    setComment(\"\");\n  };\n  return (\n    <div className=\"post\">\n      <div className=\"post__header\">\n        <Avatar\n          className=\"post__avatar\"\n          alt={username}\n          src=\"static/images.png\"\n        />\n        <h3>{username}</h3>\n      </div>\n\n      <img className=\"post__image\" src={imageUrl} alt=\"\" />\n      <h4 className=\"post__text\">\n        <strong>{username}</strong>: {caption}\n      </h4>\n      <div className=\"post__comments\">\n        {comments.map((comment) => (\n          <p>\n            <b>{comment.username}</b> {comment.text}\n          </p>\n        ))}\n      </div>\n      {user && (\n        <form className=\"post__commentBox\">\n          <input\n            className=\"post__input\"\n            type=\"text\"\n            placeholder=\"add a comment...\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n          />\n          <button\n            className=\"post__button\"\n            disabled={!comment}\n            type=\"submit\"\n            onClick={postComment}\n          >\n            Post\n          </button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport default Post;\n","import React, { useState } from \"react\";\n\nimport { Button } from \"@material-ui/core\";\nimport { storage, db } from \"./firebase\";\nimport firebase from \"firebase\";\nimport \"./NewPost.css\";\n\nfunction NewPost({ setNewPostModal, username }) {\n  const [caption, setCaption] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [progress, setProgress] = useState(0);\n\n  const handleChange = (e) => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        setProgress(progress);\n      },\n      (error) => {\n        alert(error.message);\n      },\n      () => {\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n          .then((url) => {\n            db.collection(\"posts\").add({\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n              caption: caption,\n              imageUrl: url,\n              username: username,\n            });\n            setProgress(0);\n            setCaption(\"\");\n            setImage(null);\n          });\n        setNewPostModal(false);\n      }\n    );\n  };\n\n  return (\n    <div className=\"newPost\">\n      <h5>Add a New Post</h5>\n      <progress className=\"newPost__progressbar\" value={progress} max=\"100\" />\n      <input\n        className=\"newPost__caption\"\n        type=\"text\"\n        onChange={(e) => setCaption(e.target.value)}\n        value={caption}\n        placeholder=\"Enter a caption..\"\n      />\n      <input type=\"file\" onChange={handleChange} />\n      <Button onClick={handleUpload}>Upload</Button>\n    </div>\n  );\n}\n\nexport default NewPost;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Post\";\nimport NewPost from \"./NewPost\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\n\nimport { auth, db } from \"./firebase\";\nimport { Button, Input } from \"@material-ui/core\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [openSignUpModal, setOpenSignUpModal] = useState(false);\n  const [openSignInModal, setOpenSignInModal] = useState(false);\n  const [openNewPostModal, setNewPostModal] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user logged in\n        console.log(\"AUTH USER\", authUser);\n        setUser(authUser);\n        if (authUser.displayName) {\n          // we already have a username\n        } else {\n          //  we don't have a username\n          return authUser.updateProfile({ displayName: username });\n        }\n      } else {\n        // user logged out\n        setUser(null);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setPosts(\n          snapshot.docs.map((doc) => ({ id: doc.id, post: doc.data() }))\n        );\n      });\n  }, []);\n\n  const signUp = (e) => {\n    e.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpenSignUpModal(false);\n  };\n\n  const signIn = (e) => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n    setOpenSignInModal(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Modal open={openSignUpModal} onClose={() => setOpenSignUpModal(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n              />\n            </center>\n\n            <Input\n              placeholder=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n\n            <Button type=\"submit\" onClick={signUp}>\n              Sign Up\n            </Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal open={openSignInModal} onClose={() => setOpenSignInModal(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n              />\n            </center>\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n\n            <Button type=\"submit\" onClick={signIn}>\n              Sign In\n            </Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal open={openNewPostModal} onClose={() => setNewPostModal(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          {user?.displayName && (\n            <NewPost\n              setNewPostModal={setNewPostModal}\n              username={user.displayName}\n            />\n          )}\n        </div>\n      </Modal>\n\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"\"\n        />\n        {user ? (\n          <div className=\"app__loggedinContainer\">\n            <Button onClick={() => setNewPostModal(true)}>\n              Create New Post{\" \"}\n            </Button>\n            <Button onClick={() => auth.signOut()}>Logout</Button>\n          </div>\n        ) : (\n          <div className=\"app__loginContainer\">\n            <Button onClick={() => setOpenSignInModal(true)}>Sign In</Button>\n            <Button onClick={() => setOpenSignUpModal(true)}>Sign Up</Button>\n          </div>\n        )}\n      </div>\n      {user ? (\n        <div className=\"app__posts\">\n          {posts.map(({ id, post }) => (\n            <Post\n              postId={id}\n              key={id}\n              username={post.username}\n              caption={post.caption}\n              imageUrl={post.imageUrl}\n              user={user}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"app__infoMessage\">\n          <h2>\n            Instagram Clone App (Made By{\" \"}\n            <a href=\"http://ahadzai.com/\" target=\"_blank\">\n              Ahad Zai\n            </a>\n            )\n          </h2>\n          <br />\n          <h3>Description: </h3>\n          <p>\n            This project mimics the functionality of a popular social media\n            site, Instagram.\n            <br />\n            You can add new posts, view other people's posts and comment on each\n            other's posts.\n            <br />\n            This project was created using HTML, CSS, JavaScript and React. With\n            Firebase as the backend. <br />\n            <br />\n            Source Code:{\" \"}\n            <a\n              href=\"https://github.com/AhadKhan98/Instagram-Clone-ReactJS\"\n              target=\"_blank\"\n            >\n              View On GitHub\n            </a>\n            <br />\n            <br />\n            <strong>Note</strong>: This app does not sync or affect your actual\n            Instagram posts, it only mimics the functionality.\n            <br />\n            It also does not have features such as following users. All the\n            posts are displayed to everyone that signed up on this app.\n          </p>\n          <br />\n          <h3>Instructions: </h3>\n          <p>\n            <ol>\n              <li>Login/Sign up using the buttons above.</li>\n              <li>You will be able to see all of the existing posts.</li>\n              <li>\n                Add a new post by clicking on the 'Create New Post' at the top.\n              </li>\n              <li>\n                You can add comments to other's posts and they will show up in\n                real-time.\n              </li>\n            </ol>\n          </p>\n          <br />\n          <h4>Please login/signup in order to view or create posts</h4>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}